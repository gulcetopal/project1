// Generated by gencpp from file odom/reset_odomResponse.msg
// DO NOT EDIT!


#ifndef ODOM_MESSAGE_RESET_ODOMRESPONSE_H
#define ODOM_MESSAGE_RESET_ODOMRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace odom
{
template <class ContainerAllocator>
struct reset_odomResponse_
{
  typedef reset_odomResponse_<ContainerAllocator> Type;

  reset_odomResponse_()
    : old_x(0.0)
    , old_y(0.0)
    , old_yaw(0.0)  {
    }
  reset_odomResponse_(const ContainerAllocator& _alloc)
    : old_x(0.0)
    , old_y(0.0)
    , old_yaw(0.0)  {
  (void)_alloc;
    }



   typedef double _old_x_type;
  _old_x_type old_x;

   typedef double _old_y_type;
  _old_y_type old_y;

   typedef double _old_yaw_type;
  _old_yaw_type old_yaw;





  typedef boost::shared_ptr< ::odom::reset_odomResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::odom::reset_odomResponse_<ContainerAllocator> const> ConstPtr;

}; // struct reset_odomResponse_

typedef ::odom::reset_odomResponse_<std::allocator<void> > reset_odomResponse;

typedef boost::shared_ptr< ::odom::reset_odomResponse > reset_odomResponsePtr;
typedef boost::shared_ptr< ::odom::reset_odomResponse const> reset_odomResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::odom::reset_odomResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::odom::reset_odomResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::odom::reset_odomResponse_<ContainerAllocator1> & lhs, const ::odom::reset_odomResponse_<ContainerAllocator2> & rhs)
{
  return lhs.old_x == rhs.old_x &&
    lhs.old_y == rhs.old_y &&
    lhs.old_yaw == rhs.old_yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::odom::reset_odomResponse_<ContainerAllocator1> & lhs, const ::odom::reset_odomResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace odom

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::odom::reset_odomResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::odom::reset_odomResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::odom::reset_odomResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::odom::reset_odomResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::odom::reset_odomResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::odom::reset_odomResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::odom::reset_odomResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "12559404318431143b8cb18e1b42122d";
  }

  static const char* value(const ::odom::reset_odomResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1255940431843114ULL;
  static const uint64_t static_value2 = 0x3b8cb18e1b42122dULL;
};

template<class ContainerAllocator>
struct DataType< ::odom::reset_odomResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "odom/reset_odomResponse";
  }

  static const char* value(const ::odom::reset_odomResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::odom::reset_odomResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 old_x\n"
"float64 old_y\n"
"float64 old_yaw\n"
;
  }

  static const char* value(const ::odom::reset_odomResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::odom::reset_odomResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.old_x);
      stream.next(m.old_y);
      stream.next(m.old_yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct reset_odomResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::odom::reset_odomResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::odom::reset_odomResponse_<ContainerAllocator>& v)
  {
    s << indent << "old_x: ";
    Printer<double>::stream(s, indent + "  ", v.old_x);
    s << indent << "old_y: ";
    Printer<double>::stream(s, indent + "  ", v.old_y);
    s << indent << "old_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.old_yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ODOM_MESSAGE_RESET_ODOMRESPONSE_H
